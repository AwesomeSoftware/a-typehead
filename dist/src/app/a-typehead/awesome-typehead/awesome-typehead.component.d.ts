import { OnInit, ElementRef, ComponentFactoryResolver, ViewContainerRef, OnDestroy, EventEmitter } from '@angular/core';
import { FormControl, ControlValueAccessor } from '@angular/forms';
import { AwesomeOption } from './../shared/awesome-option';
export declare class AwesomeTypeheadComponent implements OnInit, OnDestroy, ControlValueAccessor {
    container: ElementRef;
    optionsElement: ElementRef;
    private componentFactoryResolver;
    private viewContainerRef;
    formControl: FormControl;
    idField: string;
    textField: string;
    id: number;
    debug: boolean;
    options: any[];
    selectedOption: any;
    optionsOpened: boolean;
    filterOnBackend: boolean;
    filterDelayMs: number;
    helperButton: string;
    onHelperButtonClick: EventEmitter<any>;
    onOptionSelected: EventEmitter<any>;
    private _selectedOption;
    private optionsRaw;
    private optionsUnFiltered;
    private optionsFiltered;
    private _optionsOpened;
    private typeHeadValue;
    private optionsComponentRef;
    private optionsFilterTerms;
    private optionsFilterObservable;
    private activeFocusPosition;
    private isDisabled;
    private onChange;
    private onTouched;
    private onWindowScrollOrResizeDelegate;
    private onBodyClickDelegate;
    constructor(container: ElementRef, optionsElement: ElementRef, componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(val: any): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    toggleOptions(): void;
    openOptions(): void;
    closeOptions(): void;
    focusIntoInputControl(): void;
    selectInputControlText(): void;
    optionWasSelected(option: AwesomeOption): void;
    onInputBlur($event: any): void;
    onInputKeyPressed($event: KeyboardEvent): void;
    onOptionsMouseEntered($event: any): void;
    onInputGroupMouseEntered($event: any): void;
    onWindowScrollOrResize(): void;
    onBodyClick($event: any): void;
    onInputChange($event: any): void;
    private appendOptionsCompToBody();
    private removeOptionsComFromBody();
    private setOptions(options);
    private setSelectedOption(option, updateFormControl?);
    private updateSelectedOptionValue(objValue, textValue, updateFormControl?);
    private matchInputWithOption();
    private updateOptionsScreenLocation();
    private getInputControl();
    private getInputGroupButton();
    private bindEvents();
    private unBindEvents();
    private isValueUpdateRequired(option);
    private filterOptions(text, options);
    private moveActiveFocus(position);
}
