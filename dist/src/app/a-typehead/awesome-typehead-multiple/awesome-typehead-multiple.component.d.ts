import { OnInit, ElementRef, ComponentFactoryResolver, ViewContainerRef, OnDestroy, EventEmitter } from '@angular/core';
import { FormControl, ControlValueAccessor } from '@angular/forms';
export declare class AwesomeTypeheadMultipleComponent implements OnInit, OnDestroy, ControlValueAccessor {
    container: ElementRef;
    optionsElement: ElementRef;
    private componentFactoryResolver;
    private viewContainerRef;
    formControl: FormControl;
    idField: string;
    textField: string;
    placeholder: string;
    id: number;
    debug: boolean;
    options: any[];
    selectedOptions: any[];
    optionsOpened: boolean;
    filterDelayMs: number;
    onHelperButtonClick: EventEmitter<any>;
    onOptionSelected: EventEmitter<any>;
    private isDisabled;
    private optionsDropOpen;
    private inputFocusedIn;
    private optionsRaw;
    private optionsUnFiltered;
    private optionsFiltered;
    private selectedOptionsValue;
    private typeHeadValue;
    private activeFocusPosition;
    private optionsComponentRef;
    private optionsFilterObservable;
    private onWindowScrollOrResizeDelegate;
    private onBodyClickDelegate;
    private optionsFilterTerms;
    private onChange;
    private onTouched;
    writeValue(val: any): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    constructor(container: ElementRef, optionsElement: ElementRef, componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private onInputBlur($event);
    private onInputFocus($event);
    private onInputKeyPressed($event);
    private onInputChange($event);
    private optionWasSelected(option);
    private onOptionRemove(option);
    private onWindowScrollOrResize();
    private onBodyClick($event);
    private setOptions(options);
    private setSelectedOptions(options, updateFormControl?);
    private updateSelectedOptionsValue(arrayValue, updateFormControl?);
    private toggleOptions($event);
    private toggleClassOnFocus();
    private openOptions();
    private closeOptions();
    private bindEvents();
    private unBindEvents();
    private appendOptionsCompToBody();
    private removeOptionsComFromBody();
    private updateOptionsScreenLocation();
    private focusIntoInputControl();
    private getInputControl();
    private getInputGroupButton();
    private selectInputControlText();
    private isValueUpdateRequired(options);
    private filterOptions(text, options);
    private moveActiveFocus(position);
    private matchInputWithOption();
}
