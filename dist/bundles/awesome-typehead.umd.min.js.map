{"version":3,"file":"awesome-typehead.umd.min.js","sources":["~/awesome-typehead/src/app/a-typehead/awesome-options/awesome-options.component.ts","~/awesome-typehead/src/app/a-typehead/shared/awesome-helper.ts","~/awesome-typehead/src/app/a-typehead/shared/awesome-option.ts","~/awesome-typehead/src/app/a-typehead/awesome-typehead/awesome-typehead.component.ts","~/awesome-typehead/src/app/a-typehead/awesome-typehead-multiple/awesome-typehead-multiple.component.ts","~/awesome-typehead/src/app/a-typehead/awesome-typehead.module.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit, ElementRef } from '@angular/core';\n\nimport { AwesomeOption } from './../shared/awesome-option';\nexport class AwesomeOptionsComponent implements OnInit {\n/**\n * @param {?} val\n * @return {?}\n */\npublic set options(val: AwesomeOption[]) {\n        this._options = val;\n    }\npublic selectedOption: AwesomeOption;\npublic mainElement: ElementRef;\npublic debug = false;\n/**\n * @param {?} style\n * @return {?}\n */\npublic set style(style: string) {\n        this.optionsElement.nativeElement.setAttribute('style', style);\n    }\npublic activeFocusPosition: number;\npublic helperButton = 'test';\npublic onOptionSelected = new EventEmitter<AwesomeOption>();\npublic onMouseEnter = new EventEmitter<any>();\npublic onHelperButtonClick = new EventEmitter<any>();\n/**\n * @return {?}\n */\npublic get options(): AwesomeOption[] {\n        return this._options;\n    }\nprivate _options: AwesomeOption[];\n/**\n * @param {?} optionsElement\n */\nconstructor(public optionsElement: ElementRef) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    }\n/**\n * @param {?} option\n * @return {?}\n */\nselectOption(option: AwesomeOption) {\n        this.onOptionSelected.emit(option);\n    }\n/**\n * @param {?} option\n * @return {?}\n */\nisOptionSelected(option: AwesomeOption): boolean {\n        if (!this.selectedOption) {\n            return false;\n        }\n        if (typeof option === 'object') {\n            return option.text === this.selectedOption.text;\n        } else {\n            return option === this.selectedOption;\n        }\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonMouseEntered($event) {\n        this.onMouseEnter.emit($event);\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonHelperButtonClickHandler($event: Event) {\n        this.onHelperButtonClick.emit($event);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'a-options',\n    template: `\n      <div class=\"a-options\"\n          (mouseenter)=\"onMouseEntered($event)\" >\n          <ul class=\"dropdown-menu show\">\n              <li class=\"hidden\">\n                  <a href=\"javascript:void(0);\" class=\"dropdown-item\"\n                      *ngIf=\"helperButton\"\n                      (click)=\"onHelperButtonClickHandler($event)\">{{helperButton}}</a>\n              </li>\n              <li *ngFor=\"let option of options; let index=index\">\n                  <a href=\"javascript:void(0);\" class=\"dropdown-item\" (click)=\"selectOption(option)\"\n                      [ngClass]=\"{'active': isOptionSelected(option), 'hover': index === activeFocusPosition && !isOptionSelected(option)}\">\n                      {{option.text}}\n                  </a>\n              </li>\n              <li *ngIf=\"!options || options.length === 0\">\n                  <div class=\"text-center\">No matches</div>\n              </li>\n          </ul>\n      </div>\n    `,\n    styles: [`\n      .a-options > ul {\n        width: 100%; }\n\n      .a-options > ul > li > a {\n        padding-top: 0.5rem;\n        padding-bottom: 0.5rem; }\n        .a-options > ul > li > a.hover {\n          background-color: rgba(162, 162, 162, 0.1);\n          color: inherit; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'selectedOption': [{ type: Input },],\n'mainElement': [{ type: Input },],\n'debug': [{ type: Input },],\n'style': [{ type: Input },],\n'activeFocusPosition': [{ type: Input },],\n'helperButton': [{ type: Input },],\n'onOptionSelected': [{ type: Output },],\n'onMouseEnter': [{ type: Output },],\n'onHelperButtonClick': [{ type: Output },],\n};\n}\n\nfunction AwesomeOptionsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAwesomeOptionsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAwesomeOptionsComponent.ctorParameters;\n/** @type {?} */\nAwesomeOptionsComponent.propDecorators;\n/** @type {?} */\nAwesomeOptionsComponent.prototype.selectedOption;\n/** @type {?} */\nAwesomeOptionsComponent.prototype.mainElement;\n/** @type {?} */\nAwesomeOptionsComponent.prototype.debug;\n/** @type {?} */\nAwesomeOptionsComponent.prototype.activeFocusPosition;\n/** @type {?} */\nAwesomeOptionsComponent.prototype.helperButton;\n/** @type {?} */\nAwesomeOptionsComponent.prototype.onOptionSelected;\n/** @type {?} */\nAwesomeOptionsComponent.prototype.onMouseEnter;\n/** @type {?} */\nAwesomeOptionsComponent.prototype.onHelperButtonClick;\n/** @type {?} */\nAwesomeOptionsComponent.prototype._options;\n/** @type {?} */\nAwesomeOptionsComponent.prototype.optionsElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { AwesomeOption } from './awesome-option';\nexport class AwesomeHelper {\n/**\n * @param {?} options\n * @param {?} textField\n * @param {?} idField\n * @return {?}\n */\npublic static toAwesomeOptions(options: any[], textField: string, idField: string): AwesomeOption[] {\n        if (!options) {\n            return null;\n        }\n        const /** @type {?} */ awesomeOptions: AwesomeOption[] = [];\n        options.forEach((option) => {\n            awesomeOptions.push(new AwesomeOption(textField, idField, option));\n        });\n        return awesomeOptions;\n    }\n/**\n * @param {?} awesomeOptions\n * @return {?}\n */\npublic static fromAwesomeOptions(awesomeOptions: AwesomeOption[]): any[] {\n        if (!awesomeOptions) {\n            return null;\n        }\n        const /** @type {?} */ options: any[] = [];\n        awesomeOptions.forEach((option) => {\n            options.push(option.model);\n        });\n        return options;\n    }\n/**\n * @param {?} element\n * @param {?} query\n * @return {?}\n */\npublic static getStylesPosition(element: any, query: string) {\n        const /** @type {?} */ clientRect = element\n            .querySelector(query)\n            .getBoundingClientRect();\n        const /** @type {?} */ width = clientRect.width;\n        const /** @type {?} */ height = clientRect.height;\n        const /** @type {?} */ leftOffset = clientRect.left;\n        const /** @type {?} */ topOffset = clientRect.top + height + window.pageYOffset;\n\n        return `position: absolute;\n                width: ${width}px;\n                left: ${leftOffset}px;\n                top: ${topOffset}px;\n                z-index: 100000;`;\n    }\n/**\n * @param {?} text\n * @return {?}\n */\npublic static stringToLowerSafely(text: string) {\n        if (!text) {\n            return text;\n        } else {\n            return text.toLowerCase();\n        }\n    }\n}\n","import { AwesomeHelper } from './awesome-helper';\nexport class AwesomeOption {\n/**\n * @param {?=} textField\n * @param {?=} idField\n * @param {?=} model\n * @param {?=} simpleText\n */\nconstructor(private textField?: string,\nprivate idField?: string,\npublic model?: any,\nprivate simpleText?: string) {\n    }\n/**\n * @return {?}\n */\npublic get text(): string {\n        if (this.model && this.textField) {\n            return this.model[this.textField];\n        } else if (this.simpleText) {\n            return this.simpleText;\n        } else {\n            return null;\n        }\n    }\n/**\n * @return {?}\n */\npublic get id(): string {\n        if (this.model && this.idField) {\n            return this.model[this.idField];\n        } else {\n            return null;\n        }\n    }\n/**\n * @param {?} newValue\n * @return {?}\n */\npublic compare(newValue: any): boolean {\n        if (!newValue) {\n            return false;\n        }\n        const /** @type {?} */ curText = AwesomeHelper.stringToLowerSafely(this.text);\n        const /** @type {?} */ curId = this.id;\n        if (newValue instanceof AwesomeOption) {\n            const /** @type {?} */ newText = AwesomeHelper.stringToLowerSafely(newValue.text);\n            const /** @type {?} */ newId = newValue.id;\n            return curText === newText && curId === newId;\n        } else {\n            const /** @type {?} */ newText = AwesomeHelper.stringToLowerSafely(newValue[this.textField]);\n            const /** @type {?} */ newId = newValue[this.idField];\n            return curText === newText && this.id === newId;\n        }\n    }\n}\n\nfunction AwesomeOption_tsickle_Closure_declarations() {\n/** @type {?} */\nAwesomeOption.prototype.textField;\n/** @type {?} */\nAwesomeOption.prototype.idField;\n/** @type {?} */\nAwesomeOption.prototype.model;\n/** @type {?} */\nAwesomeOption.prototype.simpleText;\n}\n\n","import { Component, Input, OnInit, ElementRef, forwardRef, ComponentFactoryResolver,\n    ViewContainerRef, ComponentRef, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { FormControl, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Subject } from 'rxjs/Subject';\n\nimport { AwesomeOptionsComponent } from '../awesome-options/awesome-options.component';\nimport { AwesomeOption } from './../shared/awesome-option';\nimport { AwesomeHelper } from './../shared/awesome-helper';\n\nconst /** @type {?} */ noop = () => {};\nexport class AwesomeTypeheadComponent implements OnInit, OnDestroy, ControlValueAccessor {\npublic formControl: FormControl = new FormControl();\npublic idField = 'id';\npublic textField = 'text';\npublic id = Math.random();\npublic debug = false;\n/**\n * @param {?} options\n * @return {?}\n */\npublic set options(options: any[]) {\n        this.optionsRaw = options;\n        this.setOptions(options);\n    }\n/**\n * @param {?} option\n * @return {?}\n */\npublic set selectedOption(option: any) {\n        this.setSelectedOption(option);\n    }\n/**\n * @param {?} val\n * @return {?}\n */\npublic set optionsOpened(val: boolean) {\n        this._optionsOpened = val;\n    }\npublic filterOnBackend = false;\npublic filterDelayMs = 150;\npublic helperButton = 'test';\npublic onHelperButtonClick = new EventEmitter<any>();\npublic onOptionSelected = new EventEmitter<any>();\n/**\n * @return {?}\n */\npublic get selectedOption(): any {\n        return this._selectedOption;\n    }\n/**\n * @return {?}\n */\npublic get optionsOpened(): boolean {\n        return this._optionsOpened;\n    }\nprivate _selectedOption: AwesomeOption;\nprivate optionsRaw: any[] = [];\nprivate optionsUnFiltered: AwesomeOption[] = [];\nprivate optionsFiltered: AwesomeOption[] = [];\nprivate _optionsOpened = false;\nprivate typeHeadValue: string;\nprivate optionsComponentRef: ComponentRef<AwesomeOptionsComponent>;\nprivate optionsFilterTerms = new Subject<string>();\nprivate optionsFilterObservable: Observable<AwesomeOption[]>;\nprivate activeFocusPosition: number;\nprivate isDisabled = false;\nprivate onChange: (_: any) => void = noop;\nprivate onTouched: () => void = noop;\nprivate onWindowScrollOrResizeDelegate: any = this.onWindowScrollOrResize.bind(this);\nprivate onBodyClickDelegate: any = this.onBodyClick.bind(this);\n/**\n * @param {?} container\n * @param {?} optionsElement\n * @param {?} componentFactoryResolver\n * @param {?} viewContainerRef\n */\nconstructor(public container: ElementRef,\npublic optionsElement: ElementRef,\nprivate componentFactoryResolver: ComponentFactoryResolver,\nprivate viewContainerRef: ViewContainerRef) {}\n/**\n * @return {?}\n */\nngOnInit() {\n        if (this.filterOnBackend) {\n            // TODO develop filtering on backend\n            // it should execute the routine for requesting data\n            // and show the spinner while this is loading\n        } else {\n            // run the filter search with debounce time configured in the component\n            this.optionsFilterObservable = this.optionsFilterTerms\n                .debounceTime(this.filterDelayMs)\n                .distinctUntilChanged()\n                .switchMap(term => {\n                    return Observable.of(this.filterOptions(term, this.optionsUnFiltered));\n                });\n            // update filtered options\n            this.optionsFilterObservable.subscribe((data: AwesomeOption[]) => {\n                if (this.debug) {\n                    console.log('filtered', data, this.optionsFiltered, this.optionsUnFiltered);\n                }\n                this.optionsFiltered = data;\n                this.optionsComponentRef.instance.options = data;\n            });\n        }\n    }\n/**\n * @return {?}\n */\nngOnDestroy() {\n        this.removeOptionsComFromBody();\n    }\n/**\n * @param {?} val\n * @return {?}\n */\nwriteValue(val: any): void {\n        if (this.isValueUpdateRequired(val)) {\n            this.setSelectedOption(val, false);\n        }\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n        this.isDisabled = isDisabled;\n    }\n/**\n * @return {?}\n */\ntoggleOptions() {\n        if (this._optionsOpened === true) {\n            this.closeOptions();\n        } else {\n            this.optionsFilterTerms.next(this.typeHeadValue);\n            this.openOptions();\n            this.focusIntoInputControl();\n        }\n    }\n/**\n * @return {?}\n */\nopenOptions() {\n        this._optionsOpened = true;\n        this.appendOptionsCompToBody();\n        this.bindEvents();\n    }\n/**\n * @return {?}\n */\ncloseOptions() {\n        this.removeOptionsComFromBody();\n        this._optionsOpened = false;\n        this.activeFocusPosition = undefined;\n        this.unBindEvents();\n    }\n/**\n * @return {?}\n */\nfocusIntoInputControl() {\n        setTimeout(() => {\n            this.getInputControl().select();\n        }, 1);\n    }\n/**\n * @return {?}\n */\nselectInputControlText() {\n        setTimeout(() => {\n            this.getInputControl().select();\n        }, 1);\n    }\n/**\n * @param {?} option\n * @return {?}\n */\noptionWasSelected(option: AwesomeOption) {\n        if (this.debug) {\n            console.log('onOptionSelected', option);\n        }\n        this.selectedOption = option;\n        this.closeOptions();\n        if (option) {\n            this.selectInputControlText();\n            this.onOptionSelected.emit(option.model);\n        }\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonInputBlur($event) {\n        if (!this.selectedOption || (this.selectedOption.text !== this.typeHeadValue)) {\n            this.matchInputWithOption();\n        }\n        setTimeout(() => {\n            if (this.debug) {\n                console.log('onInputBlur');\n            }\n            // close the options if active focus is not inside the element\n            if ((document.activeElement !== this.getInputGroupButton()) && (document.activeElement !== this.getInputControl())) {\n                this.closeOptions();\n            }\n            this.onTouched();\n        }, 250);\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonInputKeyPressed($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            // https://css-tricks.com/snippets/javascript/javascript-keycodes/\n            case 38: // up arrow\n            case 40: // down arrow\n                $event.preventDefault();\n                // open options dropdown if it was closed\n                if (!this.optionsOpened) {\n                    this.openOptions();\n                }\n                // move the active option line\n                if ($event.keyCode === 38) {\n                    this.moveActiveFocus(-1);\n                } else if ($event.keyCode === 40) {\n                    this.moveActiveFocus(+1);\n                }\n                this.optionsComponentRef.instance.activeFocusPosition = this.activeFocusPosition;\n                break;\n            case 27: // escape\n                $event.preventDefault();\n                // close options dropdown if it was open\n                if (this.optionsOpened) {\n                    this.closeOptions();\n                }\n                // revert the text back to the previous value\n                if (this.selectedOption) {\n                    if (this.selectedOption.text !== this.typeHeadValue) {\n                        this.typeHeadValue = this.selectedOption.text;\n                    }\n                } else {\n                    // reset the typehead text if there was no option selected before\n                    this.typeHeadValue = '';\n                }\n                // focus into typehead\n                this.focusIntoInputControl();\n                break;\n            case 13: // enter\n                $event.preventDefault();\n                if (this.activeFocusPosition !== undefined) {\n                    const /** @type {?} */ selectedOption = this.optionsFiltered[this.activeFocusPosition];\n                    this.setSelectedOption(selectedOption);\n                    this.activeFocusPosition = undefined;\n                    this.closeOptions();\n                    this.focusIntoInputControl();\n                } else {\n                    if (this.typeHeadValue === '') {\n                        this.setSelectedOption(null);\n                        this.closeOptions();\n                    } else {\n                        this.matchInputWithOption();\n                        this.closeOptions();\n                        this.focusIntoInputControl();\n                    }\n                }\n                break;\n        }\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonOptionsMouseEntered($event) {\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonInputGroupMouseEntered($event) {\n    }\n/**\n * @return {?}\n */\nonWindowScrollOrResize() {\n        this.updateOptionsScreenLocation();\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonBodyClick($event) {\n        // find if the click has occured inside of the container or options elements\n        let /** @type {?} */ matchingElement = $event.path.indexOf(this.container.nativeElement);\n        if (matchingElement === -1) {\n            matchingElement = $event.path.indexOf(this.optionsComponentRef.instance.optionsElement.nativeElement);\n        }\n        // if the click was outside of either component elements ignore and prevent the event\n        // otherwise close the options\n        if (matchingElement !== -1) {\n            $event.preventDefault();\n            return;\n        } else {\n            this.closeOptions();\n        }\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonInputChange($event) {\n        if (this.debug) {\n            console.log('onInputChange', $event);\n        }\n        // open options dropdown if it was closed\n        if (!this.optionsOpened) {\n            this.openOptions();\n        }\n        // insert term into routine call\n        this.optionsFilterTerms.next($event);\n    }\n/**\n * @return {?}\n */\nprivate appendOptionsCompToBody() {\n        const /** @type {?} */ factory = this.componentFactoryResolver.resolveComponentFactory(AwesomeOptionsComponent);\n        this.optionsComponentRef = this.viewContainerRef.createComponent(factory);\n        this.optionsComponentRef.changeDetectorRef.detectChanges();\n        this.optionsComponentRef.instance.options = this.optionsFiltered;\n        this.optionsComponentRef.instance.debug = this.debug;\n        this.optionsComponentRef.instance.selectedOption = this.selectedOption;\n        this.optionsComponentRef.instance.mainElement = this.container;\n        this.optionsComponentRef.instance.helperButton = this.helperButton;\n        this.optionsComponentRef.instance.onOptionSelected.subscribe(data => this.optionWasSelected(data));\n        this.optionsComponentRef.instance.onHelperButtonClick.subscribe(data => this.onHelperButtonClick.emit(data));\n        document.querySelector('body')\n            .appendChild(this.optionsComponentRef.instance.optionsElement.nativeElement);\n        this.updateOptionsScreenLocation();\n    }\n/**\n * @return {?}\n */\nprivate removeOptionsComFromBody() {\n        if (this.optionsComponentRef) {\n            this.optionsComponentRef.destroy();\n        }\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nprivate setOptions(options: any[]) {\n        if (this.debug) {\n            console.log('setOptions', options);\n        }\n        if (!options) {\n            this.optionsUnFiltered = [];\n        } else {\n            const /** @type {?} */ awesomeOptions: AwesomeOption[] = AwesomeHelper\n                .toAwesomeOptions(options, this.textField, this.idField);\n            this.optionsUnFiltered = awesomeOptions;\n            this.optionsFiltered = awesomeOptions;\n        }\n    }\n/**\n * @param {?} option\n * @param {?=} updateFormControl\n * @return {?}\n */\nprivate setSelectedOption(option: any, updateFormControl = true) {\n        if (this.debug) {\n            console.log('setSelectedOption', option, updateFormControl);\n        }\n        if (!option) {\n            this.updateSelectedOptionValue(null, null, updateFormControl);\n            return;\n        }\n        // set either model or simple text to a formControl instance\n        if (option instanceof AwesomeOption) {\n            // update value only if it differes\n            // this prevents unnecessary events being triggered\n            if (this.isValueUpdateRequired(option)) {\n                this.updateSelectedOptionValue(option, option.text, updateFormControl);\n            }\n        } else {\n            if (typeof option === 'object') {\n                const /** @type {?} */ awesomeOption = new AwesomeOption(this.textField, this.idField, option);\n                this.updateSelectedOptionValue(awesomeOption, awesomeOption.text, updateFormControl);\n            } else {\n                const /** @type {?} */ awesomeOption = new AwesomeOption(null, null, null, option);\n                this.updateSelectedOptionValue(awesomeOption.text, awesomeOption.text, updateFormControl);\n            }\n        }\n    }\n/**\n * @param {?} objValue\n * @param {?} textValue\n * @param {?=} updateFormControl\n * @return {?}\n */\nprivate updateSelectedOptionValue(objValue: any, textValue: string, updateFormControl = true) {\n        if (this.debug) {\n            console.log('updateSelectedOptionValue', objValue, textValue, updateFormControl);\n        }\n        this._selectedOption = objValue;\n        this.typeHeadValue = textValue;\n        if (updateFormControl) {\n            if (objValue instanceof AwesomeOption) {\n                this.formControl.setValue(objValue.model);\n                this.onChange(objValue.model);\n            } else {\n                this.formControl.setValue(objValue);\n                this.onChange(objValue);\n            }\n        }\n    }\n/**\n * @return {?}\n */\nprivate matchInputWithOption() {\n        if (!this.typeHeadValue) {\n            this.selectedOption = null;\n            return;\n        }\n        if (this.optionsFiltered && this.optionsFiltered.length === 1) {\n            this.selectedOption = this.optionsFiltered[0];\n            this.typeHeadValue = this.optionsFiltered[0].text;\n            this.onOptionSelected.emit(this.selectedOption.model);\n        } else {\n            // if the user has typed in different casing it will automatically match with an option\n            const /** @type {?} */ foundOption: AwesomeOption = this.optionsUnFiltered\n                .find((a: AwesomeOption) =>\n                    a.text.toLocaleLowerCase() === this.typeHeadValue.toLocaleLowerCase());\n            if (foundOption) {\n                this.selectedOption = foundOption;\n                this.typeHeadValue = foundOption.text;\n                this.onOptionSelected.emit(foundOption.model);\n            } else {\n                // reset the value if the user hasn't selected anything\n                this.typeHeadValue = null;\n                this.selectedOption = null;\n            }\n        }\n    }\n/**\n * @return {?}\n */\nprivate updateOptionsScreenLocation() {\n        const /** @type {?} */ clientRect = this.container.nativeElement\n            .querySelector('.a-typehead')\n            .getBoundingClientRect();\n        const /** @type {?} */ width = clientRect.width;\n        const /** @type {?} */ height = clientRect.height;\n        const /** @type {?} */ leftOffset = clientRect.left;\n        const /** @type {?} */ topOffset = clientRect.top + height + window.pageYOffset;\n\n        this.optionsComponentRef.instance.style =\n            `position: absolute;\n            width: ${width}px;\n            left: ${leftOffset}px;\n            top: ${topOffset}px;\n            z-index: 10000`;\n    }\n/**\n * @return {?}\n */\nprivate getInputControl() {\n        return this.container.nativeElement.querySelector('.form-control');\n    }\n/**\n * @return {?}\n */\nprivate getInputGroupButton() {\n        return this.container.nativeElement.querySelector('.input-group-addon');\n    }\n/**\n * @return {?}\n */\nprivate bindEvents() {\n        window.addEventListener('scroll', this.onWindowScrollOrResizeDelegate, true);\n        window.addEventListener('resize', this.onWindowScrollOrResizeDelegate, true);\n        document.addEventListener('click', this.onBodyClickDelegate, true);\n    }\n/**\n * @return {?}\n */\nprivate unBindEvents() {\n        window.removeEventListener('scroll', this.onWindowScrollOrResizeDelegate, true);\n        window.removeEventListener('resize', this.onWindowScrollOrResizeDelegate, true);\n        document.removeEventListener('click', this.onBodyClickDelegate, true);\n    }\n/**\n * @param {?} option\n * @return {?}\n */\nprivate isValueUpdateRequired(option) {\n        return ((this._selectedOption && !this._selectedOption.compare(option))\n            || (!this._selectedOption && option));\n    }\n/**\n * @param {?} text\n * @param {?} options\n * @return {?}\n */\nprivate filterOptions(text: string, options: AwesomeOption[]): AwesomeOption[] {\n        if (this.debug) {\n            console.log('filterOptions', options);\n        }\n        if (!text || text === '') {\n            // if there is no text supplied return unfiltered options\n            return options;\n        } else if (this.selectedOption && ( /** @type {?} */((<AwesomeOption>this.selectedOption))).text.toLowerCase() === text.toLowerCase()) {\n            // if selected option text is the same as searched text return unfiltered options\n            return options;\n        } else {\n            // in all other conditions return filtered options\n            return options.filter((option) => {\n                // filter by text contained in the option text\n                return option.text.toLowerCase().includes(text.toLowerCase());\n            });\n        }\n    }\n/**\n * @param {?} position\n * @return {?}\n */\nprivate moveActiveFocus(position: number) {\n        if (this.debug) {\n            console.log('moveActiveFocus position', position);\n        }\n        let /** @type {?} */ newPos = this.activeFocusPosition;\n        if (newPos === undefined) {\n            newPos = 0;\n        } else {\n            newPos += position;\n        }\n        if (this.optionsFiltered.length < newPos + 1) {\n            newPos = 0;\n        } else if (newPos < 0) {\n            newPos = this.optionsFiltered.length - 1;\n        }\n        this.activeFocusPosition = newPos;\n        if (this.debug) {\n            console.log('moveActiveFocus newPos', newPos);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'a-typehead',\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AwesomeTypeheadComponent),\n        multi: true\n    }],\n    template: `\n      <div class=\"input-group a-typehead\"\n          (mouseenter)=\"onInputGroupMouseEntered($event)\">\n          <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n              (blur)=\"onInputBlur($event)\"\n              (keydown)=\"onInputKeyPressed($event)\"\n              (ngModelChange)=\"onInputChange($event)\"\n              [id]=\"id\"\n              [(ngModel)]=\"typeHeadValue\"\n              [disabled]=\"isDisabled\" />\n          <input type=\"hidden\" [formControl]=\"formControl\" />\n          <span class=\"input-group-btn\">\n              <button type=\"button\" class=\"btn btn-secondary\" (click)=\"toggleOptions()\" [disabled]=\"isDisabled\">\n                  <i class=\"dropdown-toggle\"></i>\n              </button>\n          </span>\n      </div>\n      <div *ngIf=\"debug\">debug: {{_selectedOption|json}}</div>\n    `,\n    styles: [`\n\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ElementRef, },\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'formControl': [{ type: Input },],\n'idField': [{ type: Input },],\n'textField': [{ type: Input },],\n'id': [{ type: Input },],\n'debug': [{ type: Input },],\n'options': [{ type: Input },],\n'selectedOption': [{ type: Input },],\n'optionsOpened': [{ type: Input },],\n'filterOnBackend': [{ type: Input },],\n'filterDelayMs': [{ type: Input },],\n'helperButton': [{ type: Input },],\n'onHelperButtonClick': [{ type: Output },],\n'onOptionSelected': [{ type: Output },],\n};\n}\n\nfunction AwesomeTypeheadComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAwesomeTypeheadComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAwesomeTypeheadComponent.ctorParameters;\n/** @type {?} */\nAwesomeTypeheadComponent.propDecorators;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.formControl;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.idField;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.textField;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.id;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.debug;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.filterOnBackend;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.filterDelayMs;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.helperButton;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.onHelperButtonClick;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.onOptionSelected;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype._selectedOption;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.optionsRaw;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.optionsUnFiltered;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.optionsFiltered;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype._optionsOpened;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.typeHeadValue;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.optionsComponentRef;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.optionsFilterTerms;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.optionsFilterObservable;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.activeFocusPosition;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.isDisabled;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.onChange;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.onTouched;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.onWindowScrollOrResizeDelegate;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.onBodyClickDelegate;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.container;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.optionsElement;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.componentFactoryResolver;\n/** @type {?} */\nAwesomeTypeheadComponent.prototype.viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, OnInit, ElementRef, forwardRef, ComponentFactoryResolver,\n    ViewContainerRef, ComponentRef, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { FormControl, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Subject } from 'rxjs/Subject';\n\nimport { AwesomeOptionsComponent } from '../awesome-options/awesome-options.component';\nimport { AwesomeOption } from './../shared/awesome-option';\nimport { AwesomeHelper } from '../shared/awesome-helper';\n\nconst /** @type {?} */ noop = () => {};\nexport class AwesomeTypeheadMultipleComponent implements OnInit, OnDestroy, ControlValueAccessor {\npublic formControl: FormControl = new FormControl();\npublic idField = 'id';\npublic textField = 'text';\npublic placeholder = '';\npublic id = Math.random();\npublic debug = false;\n/**\n * @param {?} options\n * @return {?}\n */\npublic set options(options: any[]) {\n        this.optionsRaw = options;\n        this.setOptions(options);\n    }\n/**\n * @param {?} options\n * @return {?}\n */\npublic set selectedOptions(options: any[]) {\n        this.setSelectedOptions(options);\n    }\n/**\n * @param {?} val\n * @return {?}\n */\npublic set optionsOpened(val: boolean) {\n        this.optionsDropOpen = val;\n    }\npublic filterDelayMs = 50;\npublic onHelperButtonClick = new EventEmitter<any>();\npublic onOptionSelected = new EventEmitter<any>();\nprivate isDisabled = false;\nprivate optionsDropOpen = false;\nprivate inputFocusedIn = false;\nprivate optionsRaw: any[] = [];\nprivate optionsUnFiltered: AwesomeOption[] = [];\nprivate optionsFiltered: AwesomeOption[] = [];\nprivate selectedOptionsValue: AwesomeOption[] = [];\nprivate typeHeadValue: string;\nprivate activeFocusPosition: number;\nprivate optionsComponentRef: ComponentRef<AwesomeOptionsComponent>;\nprivate optionsFilterObservable: Observable<AwesomeOption[]>;\nprivate onWindowScrollOrResizeDelegate: any = this.onWindowScrollOrResize.bind(this);\nprivate onBodyClickDelegate: any = this.onBodyClick.bind(this);\nprivate optionsFilterTerms = new Subject<string>();\nprivate onChange: (_: any) => void = noop;\nprivate onTouched: () => void = noop;\n/**\n * @param {?} val\n * @return {?}\n */\nwriteValue(val: any): void {\n        if (this.isValueUpdateRequired(val)) {\n            this.setSelectedOptions(val, false);\n        }\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n        this.isDisabled = isDisabled;\n    }\n/**\n * @param {?} container\n * @param {?} optionsElement\n * @param {?} componentFactoryResolver\n * @param {?} viewContainerRef\n */\nconstructor(public container: ElementRef,\npublic optionsElement: ElementRef,\nprivate componentFactoryResolver: ComponentFactoryResolver,\nprivate viewContainerRef: ViewContainerRef) {}\n/**\n * @return {?}\n */\nngOnInit() {\n        if (false) {\n            // TODO develop filtering on backend\n            // it should execute the routine for requesting data\n            // and show the spinner while this is loading\n        } else {\n            // run the filter search with debounce time configured in the component\n            this.optionsFilterObservable = this.optionsFilterTerms\n                .debounceTime(this.filterDelayMs)\n                .switchMap(term => {\n                    return Observable.of(this.filterOptions(term, this.optionsUnFiltered));\n                });\n            // update filtered options\n            this.optionsFilterObservable.subscribe((data: AwesomeOption[]) => {\n                if (this.debug) {\n                    console.log('filtered', data, this.optionsFiltered, this.optionsUnFiltered);\n                }\n                this.optionsFiltered = data;\n                this.optionsComponentRef.instance.options = data;\n            });\n        }\n    }\n/**\n * @return {?}\n */\nngOnDestroy() {\n        this.removeOptionsComFromBody();\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nprivate onInputBlur($event) {\n        this.toggleClassOnFocus();\n        if (this.debug) {\n            console.log('onInputBlur');\n        }\n        setTimeout(() => {\n            // close the options if active focus is not inside the element\n            if ((document.activeElement !== this.getInputGroupButton()) &&\n                (document.activeElement !== this.getInputControl())) {\n                this.closeOptions();\n            }\n            this.onTouched();\n        }, 250);\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nprivate onInputFocus($event: Event) {\n        this.toggleClassOnFocus();\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nprivate onInputKeyPressed($event) {\n        switch ($event.keyCode) {\n            // https://css-tricks.com/snippets/javascript/javascript-keycodes/\n            case 38: // up arrow\n            case 40: // down arrow\n                $event.preventDefault();\n                // open options dropdown if it was closed\n                if (!this.optionsDropOpen) {\n                    this.openOptions();\n                }\n                // move the active option line\n                if ($event.keyCode === 38) {\n                    this.moveActiveFocus(-1);\n                } else if ($event.keyCode === 40) {\n                    this.moveActiveFocus(+1);\n                }\n                this.optionsComponentRef.instance.activeFocusPosition = this.activeFocusPosition;\n                break;\n            case 27: // escape\n                $event.preventDefault();\n                // close options dropdown if it was open\n                if (this.optionsDropOpen) {\n                    this.closeOptions();\n                }\n                // reset the typehead text\n                this.typeHeadValue = '';\n                // focus into typehead\n                this.focusIntoInputControl();\n                break;\n            case 13: // enter\n                $event.preventDefault();\n                if (this.activeFocusPosition !== undefined) {\n                    const /** @type {?} */ selectedOption = this.optionsFiltered[this.activeFocusPosition];\n                    this.optionWasSelected(selectedOption);\n                    this.activeFocusPosition = undefined;\n                    this.closeOptions();\n                    this.focusIntoInputControl();\n                } else {\n                    this.matchInputWithOption();\n                }\n                break;\n        }\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nprivate onInputChange($event) {\n        if (this.debug) {\n            console.log('onInputChange', $event);\n        }\n        // open options dropdown if it was closed\n        if (!this.optionsDropOpen) {\n            this.openOptions();\n        }\n        // insert term into routine call\n        this.optionsFilterTerms.next($event);\n    }\n/**\n * @param {?} option\n * @return {?}\n */\nprivate optionWasSelected(option: AwesomeOption) {\n        if (this.debug) {\n            console.log('optionWasSelected', option);\n        }\n        if (!this.selectedOptionsValue) {\n            this.selectedOptionsValue = [];\n        }\n        this.selectedOptionsValue.push(option);\n        this.setSelectedOptions(this.selectedOptionsValue);\n        this.closeOptions();\n        if (option) {\n            this.selectInputControlText();\n            this.onOptionSelected.emit(this.selectedOptionsValue.map((opt: AwesomeOption) => {\n                return opt.model;\n            }));\n        }\n    }\n/**\n * @param {?} option\n * @return {?}\n */\nprivate onOptionRemove(option: AwesomeOption) {\n        if (this.debug) {\n            console.log('onOptionRemove', option);\n        }\n        this.selectedOptionsValue = this.selectedOptionsValue.filter((filteredOption: AwesomeOption) => {\n            return filteredOption.compare(option) === false;\n        });\n        this.setSelectedOptions(this.selectedOptionsValue);\n    }\n/**\n * @return {?}\n */\nprivate onWindowScrollOrResize() {\n        this.updateOptionsScreenLocation();\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nprivate onBodyClick($event) {\n        // find if the click has occured inside of the container or options elements\n        let /** @type {?} */ matchingElement = $event.path.indexOf(this.container.nativeElement);\n        if (matchingElement === -1) {\n            matchingElement = $event.path.indexOf(this.optionsComponentRef.instance.optionsElement.nativeElement);\n        }\n        // if the click was outside of either component elements ignore and prevent the event\n        // otherwise close the options\n        if (matchingElement !== -1) {\n            $event.preventDefault();\n            return;\n        } else {\n            this.closeOptions();\n        }\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nprivate setOptions(options: any[]) {\n        if (this.debug) {\n            console.log('setOptions', options);\n        }\n        if (!options) {\n            this.optionsUnFiltered = [];\n        } else {\n            const /** @type {?} */ awesomeOptions: AwesomeOption[] = AwesomeHelper\n                .toAwesomeOptions(options, this.textField, this.idField);\n            this.optionsUnFiltered = awesomeOptions;\n            this.optionsFiltered = awesomeOptions;\n        }\n    }\n/**\n * @param {?} options\n * @param {?=} updateFormControl\n * @return {?}\n */\nprivate setSelectedOptions(options: any[], updateFormControl = true) {\n        if (this.debug) {\n            console.log('setSelectedOptions', options, updateFormControl);\n        }\n        if (!options || options.length === 0) {\n            this.updateSelectedOptionsValue(null, updateFormControl);\n            return;\n        }\n        const /** @type {?} */ needToConvert = !(options[0] instanceof AwesomeOption);\n        const /** @type {?} */ awesomeOptions = needToConvert ? [] : options;\n        if (needToConvert) {\n            options.forEach(option => {\n                let /** @type {?} */ aOption: AwesomeOption;\n                if (typeof option === 'object') {\n                    aOption = new AwesomeOption(this.textField, this.idField, option);\n                } else {\n                    aOption = new AwesomeOption(null, null, null, option);\n                }\n                awesomeOptions.push(aOption);\n            });\n        }\n        // update value only if it differes\n        // this prevents unnecessary events being triggered\n        if (this.isValueUpdateRequired(awesomeOptions)) {\n            this.updateSelectedOptionsValue(awesomeOptions, updateFormControl);\n        }\n    }\n/**\n * @param {?} arrayValue\n * @param {?=} updateFormControl\n * @return {?}\n */\nprivate updateSelectedOptionsValue(arrayValue: any, updateFormControl = true) {\n        if (this.debug) {\n            console.log('updateSelectedOptionsValue', arrayValue, updateFormControl);\n        }\n        this.selectedOptionsValue = arrayValue;\n        this.typeHeadValue = '';\n        if (updateFormControl) {\n            const /** @type {?} */ options = AwesomeHelper.fromAwesomeOptions(arrayValue);\n            this.formControl.setValue(options);\n            this.onChange(options);\n        }\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nprivate toggleOptions($event) {\n        if (this.optionsDropOpen === true) {\n            this.closeOptions();\n        } else {\n            this.optionsFilterTerms.next(this.typeHeadValue);\n            this.openOptions();\n            this.focusIntoInputControl();\n        }\n    }\n/**\n * @return {?}\n */\nprivate toggleClassOnFocus() {\n        this.inputFocusedIn = !this.inputFocusedIn;\n    }\n/**\n * @return {?}\n */\nprivate openOptions() {\n        this.optionsDropOpen = true;\n        this.appendOptionsCompToBody();\n        this.bindEvents();\n    }\n/**\n * @return {?}\n */\nprivate closeOptions() {\n        this.removeOptionsComFromBody();\n        this.optionsDropOpen = false;\n        this.activeFocusPosition = undefined;\n        this.unBindEvents();\n    }\n/**\n * @return {?}\n */\nprivate bindEvents() {\n        window.addEventListener('scroll', this.onWindowScrollOrResizeDelegate, true);\n        window.addEventListener('resize', this.onWindowScrollOrResizeDelegate, true);\n        document.addEventListener('click', this.onBodyClickDelegate, true);\n    }\n/**\n * @return {?}\n */\nprivate unBindEvents() {\n        window.removeEventListener('scroll', this.onWindowScrollOrResizeDelegate, true);\n        window.removeEventListener('resize', this.onWindowScrollOrResizeDelegate, true);\n        document.removeEventListener('click', this.onBodyClickDelegate, true);\n    }\n/**\n * @return {?}\n */\nprivate appendOptionsCompToBody() {\n        const /** @type {?} */ factory = this.componentFactoryResolver.resolveComponentFactory(AwesomeOptionsComponent);\n        this.optionsComponentRef = this.viewContainerRef.createComponent(factory);\n        this.optionsComponentRef.changeDetectorRef.detectChanges();\n        this.optionsComponentRef.instance.options = this.optionsFiltered;\n        this.optionsComponentRef.instance.debug = this.debug;\n        // this.optionsComponentRef.instance.selectedOption = this.selectedOption;\n        this.optionsComponentRef.instance.mainElement = this.container;\n        this.optionsComponentRef.instance.onOptionSelected.subscribe(data => this.optionWasSelected(data));\n        document.querySelector('body')\n            .appendChild(this.optionsComponentRef.instance.optionsElement.nativeElement);\n        this.updateOptionsScreenLocation();\n    }\n/**\n * @return {?}\n */\nprivate removeOptionsComFromBody() {\n        if (this.optionsComponentRef) {\n            this.optionsComponentRef.destroy();\n        }\n    }\n/**\n * @return {?}\n */\nprivate updateOptionsScreenLocation() {\n        const /** @type {?} */ styles = AwesomeHelper.getStylesPosition(this.container.nativeElement, '.a-typehead-multiple');\n        this.optionsComponentRef.instance.style = styles;\n    }\n/**\n * @return {?}\n */\nprivate focusIntoInputControl() {\n        setTimeout(() => {\n            this.getInputControl().select();\n        }, 1);\n    }\n/**\n * @return {?}\n */\nprivate getInputControl() {\n        return this.container.nativeElement.querySelector('.typehead-input');\n    }\n/**\n * @return {?}\n */\nprivate getInputGroupButton() {\n        return this.container.nativeElement.querySelector('.input-group-addon');\n    }\n/**\n * @return {?}\n */\nprivate selectInputControlText() {\n        setTimeout(() => {\n            this.getInputControl().select();\n        }, 1);\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nprivate isValueUpdateRequired(options: AwesomeOption[]) {\n        // TODO\n        return true;\n    }\n/**\n * @param {?} text\n * @param {?} options\n * @return {?}\n */\nprivate filterOptions(text: string, options: AwesomeOption[]): AwesomeOption[] {\n        if (this.debug) {\n            console.log('filterOptions begin', text, options);\n        }\n        let /** @type {?} */ filtered: AwesomeOption[] = [];\n        if (!text || text === '') {\n            // if there is no text supplied return unfiltered options\n            filtered = options;\n        } else if (false) {\n            // if selected option text is the same as searched text return unfiltered options\n            // return options;\n        } else {\n            // in all other conditions return filtered options\n            filtered = options.filter((option) => {\n                // filter by text contained in the option text\n                return option.text.toLowerCase().includes(text.toLowerCase());\n            });\n        }\n        // exclude selected options from filtered value\n        filtered = filtered.filter((filteredOption: AwesomeOption) => {\n            const /** @type {?} */ foundInSelected = (this.selectedOptionsValue || []).filter((selectedOption: AwesomeOption) => {\n                return filteredOption.compare(selectedOption);\n            });\n            return foundInSelected.length === 0;\n        });\n        if (this.debug) {\n            console.log('filterOptions end', filtered);\n        }\n        return filtered;\n    }\n/**\n * @param {?} position\n * @return {?}\n */\nprivate moveActiveFocus(position: number) {\n        if (this.debug) {\n            console.log('moveActiveFocus position', position);\n        }\n        let /** @type {?} */ newPos = this.activeFocusPosition;\n        if (newPos === undefined) {\n            newPos = 0;\n        } else {\n            newPos += position;\n        }\n        if (this.optionsFiltered.length < newPos + 1) {\n            newPos = 0;\n        } else if (newPos < 0) {\n            newPos = this.optionsFiltered.length - 1;\n        }\n        this.activeFocusPosition = newPos;\n        if (this.debug) {\n            console.log('moveActiveFocus newPos', newPos);\n        }\n    }\n/**\n * @return {?}\n */\nprivate matchInputWithOption() {\n        if (!this.typeHeadValue || this.typeHeadValue === '') {\n            return;\n        }\n        if (this.optionsFiltered && this.optionsFiltered.length === 1) {\n            this.optionWasSelected(this.optionsFiltered[0]);\n        } else {\n            // if the user has typed in different casing it will automatically match with an option\n            const /** @type {?} */ foundOption: AwesomeOption = this.optionsUnFiltered\n                .find((a: AwesomeOption) =>\n                    a.text.toLocaleLowerCase() === this.typeHeadValue.toLocaleLowerCase());\n            if (foundOption) {\n                this.optionWasSelected(foundOption);\n            }\n            this.typeHeadValue = '';\n        }\n    }\n    // #endregion Internal functionality\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'a-typehead-multiple',\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AwesomeTypeheadMultipleComponent),\n        multi: true\n    }],\n    template: `\n      <div class=\"input-group a-typehead-multiple\">\n          <div class=\"form-control typehead-container\"\n              [ngClass]=\"{'focus': inputFocusedIn}\">\n              <span class=\"badge badge-secondary option\"\n                  *ngFor=\"let option of selectedOptionsValue; let index=index\">\n                  <span class=\"option-text\">{{option.text}}</span>\n                  <span class=\"option-close\"\n                      (click)=\"onOptionRemove(option)\">\n                      <i class=\"ion-close-round\"></i>\n                  </span>\n              </span>\n              <input type=\"text\" class=\"form-control typehead-input\" autocomplete=\"off\"\n                  (blur)=\"onInputBlur($event)\"\n                  (focus)=\"onInputFocus($event)\"\n                  (keydown)=\"onInputKeyPressed($event)\"\n                  (ngModelChange)=\"onInputChange($event)\"\n                  [id]=\"id\"\n                  [(ngModel)]=\"typeHeadValue\"\n                  [disabled]=\"isDisabled\"\n                  [placeholder]=\"placeholder\" />\n          </div>\n          <span class=\"input-group-btn\">\n              <button type=\"button\" class=\"btn btn-secondary typehead-btn\" (click)=\"toggleOptions()\" [disabled]=\"isDisabled\">\n                  <i class=\"dropdown-toggle\"></i>\n              </button>\n          </span>\n      </div>\n      <div *ngIf=\"debug\">debug: {{selectedOptionsValue|json}}</div>\n    `,\n    styles: [`\n      .a-typehead-multiple .typehead-input {\n        border: none;\n        -webkit-box-shadow: none;\n                box-shadow: none;\n        min-width: 100px;\n        float: left; }\n\n      .a-typehead-multiple .typehead-container {\n        padding: 0;\n        display: block; }\n\n      .a-typehead-multiple .typehead-btn {\n        height: 100%; }\n\n      .a-typehead-multiple .option {\n        font-size: 1rem;\n        margin: 5px 0 0px 5px;\n        position: relative;\n        padding-right: 17px;\n        float: left; }\n        .a-typehead-multiple .option > .option-close {\n          position: absolute;\n          right: 5px;\n          top: 5px;\n          cursor: pointer;\n          font-size: 0.8rem; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ElementRef, },\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'formControl': [{ type: Input },],\n'idField': [{ type: Input },],\n'textField': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'id': [{ type: Input },],\n'debug': [{ type: Input },],\n'options': [{ type: Input },],\n'selectedOptions': [{ type: Input },],\n'optionsOpened': [{ type: Input },],\n'filterDelayMs': [{ type: Input },],\n'onHelperButtonClick': [{ type: Output },],\n'onOptionSelected': [{ type: Output },],\n};\n}\n\nfunction AwesomeTypeheadMultipleComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAwesomeTypeheadMultipleComponent.ctorParameters;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.propDecorators;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.formControl;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.idField;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.textField;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.placeholder;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.id;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.debug;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.filterDelayMs;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.onHelperButtonClick;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.onOptionSelected;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.isDisabled;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.optionsDropOpen;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.inputFocusedIn;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.optionsRaw;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.optionsUnFiltered;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.optionsFiltered;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.selectedOptionsValue;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.typeHeadValue;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.activeFocusPosition;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.optionsComponentRef;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.optionsFilterObservable;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.onWindowScrollOrResizeDelegate;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.onBodyClickDelegate;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.optionsFilterTerms;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.onChange;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.onTouched;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.container;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.optionsElement;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.componentFactoryResolver;\n/** @type {?} */\nAwesomeTypeheadMultipleComponent.prototype.viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AwesomeTypeheadComponent } from './awesome-typehead/awesome-typehead.component';\nimport { AwesomeTypeheadMultipleComponent } from './awesome-typehead-multiple/awesome-typehead-multiple.component';\nimport { AwesomeOptionsComponent } from './awesome-options/awesome-options.component';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/debounceTime';\nimport'rxjs/add/operator/distinctUntilChanged';\nexport class AwesomeTypeheadModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    declarations: [\n        AwesomeTypeheadComponent,\n        AwesomeTypeheadMultipleComponent,\n        AwesomeOptionsComponent\n    ],\n    providers: [\n    ],\n    exports: [\n        AwesomeTypeheadComponent,\n        AwesomeTypeheadMultipleComponent,\n        AwesomeOptionsComponent\n    ],\n    entryComponents: [\n        AwesomeTypeheadComponent,\n        AwesomeTypeheadMultipleComponent,\n        AwesomeOptionsComponent\n    ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AwesomeTypeheadModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAwesomeTypeheadModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAwesomeTypeheadModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["AwesomeOptionsComponent","optionsElement","this","debug","helperButton","onOptionSelected","EventEmitter","onMouseEnter","onHelperButtonClick","Object","defineProperty","prototype","get","_options","set","val","style","nativeElement","setAttribute","ngOnInit","selectOption","option","emit","isOptionSelected","selectedOption","text","onMouseEntered","$event","onHelperButtonClickHandler","decorators","type","Component","args","selector","template","styles","ctorParameters","ElementRef","propDecorators","options","Input","mainElement","activeFocusPosition","Output","AwesomeHelper","toAwesomeOptions","textField","idField","awesomeOptions","forEach","push","AwesomeOption","fromAwesomeOptions","model","getStylesPosition","element","query","clientRect","querySelector","getBoundingClientRect","width","height","left","top","window","pageYOffset","stringToLowerSafely","toLowerCase","simpleText","compare","newValue","curText","curId","id","newText","newId","noop","AwesomeTypeheadComponent","container","componentFactoryResolver","viewContainerRef","formControl","FormControl","Math","random","filterOnBackend","filterDelayMs","optionsRaw","optionsUnFiltered","optionsFiltered","_optionsOpened","optionsFilterTerms","Subject","isDisabled","onChange","onTouched","onWindowScrollOrResizeDelegate","onWindowScrollOrResize","bind","onBodyClickDelegate","onBodyClick","setOptions","_selectedOption","setSelectedOption","_this","optionsFilterObservable","debounceTime","distinctUntilChanged","switchMap","term","Observable","of","filterOptions","subscribe","data","console","log","optionsComponentRef","instance","ngOnDestroy","removeOptionsComFromBody","writeValue","isValueUpdateRequired","registerOnChange","fn","registerOnTouched","setDisabledState","toggleOptions","closeOptions","next","typeHeadValue","openOptions","focusIntoInputControl","appendOptionsCompToBody","bindEvents","undefined","unBindEvents","setTimeout","getInputControl","select","selectInputControlText","optionWasSelected","onInputBlur","matchInputWithOption","document","activeElement","getInputGroupButton","onInputKeyPressed","keyCode","preventDefault","optionsOpened","moveActiveFocus","onOptionsMouseEntered","onInputGroupMouseEntered","updateOptionsScreenLocation","matchingElement","path","indexOf","onInputChange","factory","resolveComponentFactory","createComponent","changeDetectorRef","detectChanges","appendChild","destroy","updateFormControl","updateSelectedOptionValue","awesomeOption","objValue","textValue","setValue","length","foundOption","find","a","toLocaleLowerCase","leftOffset","topOffset","addEventListener","removeEventListener","filter","includes","position","newPos","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ComponentFactoryResolver","ViewContainerRef","AwesomeTypeheadMultipleComponent","placeholder","optionsDropOpen","inputFocusedIn","selectedOptionsValue","setSelectedOptions","toggleClassOnFocus","onInputFocus","map","opt","onOptionRemove","filteredOption","needToConvert","aOption","updateSelectedOptionsValue","arrayValue","filtered","selectedOptions","AwesomeTypeheadModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports","entryComponents"],"mappings":"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"}
